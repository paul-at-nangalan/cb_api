// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: cloudbet/feed.proto

package cloudbet

import (
	proto "github.com/golang/protobuf/proto"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// EventStatus presents the current status for a given Event
type EventStatus int32

const (
	// event is not yet open for bet placement
	EventStatus_PRE_TRADING EventStatus = 0
	// event is open for bet placement and is not Live yet
	EventStatus_TRADING EventStatus = 1
	// event is open for bet placement and Live/In-play
	EventStatus_TRADING_LIVE EventStatus = 2
	// event has finished and bets are graded
	EventStatus_RESULTED EventStatus = 3
	// event was live, but has been interrupted. Event start time may possible change in the future.
	EventStatus_INTERRUPTED EventStatus = 4
	// event has finished and results are being awaited
	EventStatus_AWAITING_RESULTS EventStatus = 5
	// event was live, but has been suspended for trading temporarily
	EventStatus_POST_TRADING EventStatus = 6
	// event has been cancelled. All bets already placed on this event will be pushed
	EventStatus_CANCELLED EventStatus = 7
)

// Enum value maps for EventStatus.
var (
	EventStatus_name = map[int32]string{
		0: "PRE_TRADING",
		1: "TRADING",
		2: "TRADING_LIVE",
		3: "RESULTED",
		4: "INTERRUPTED",
		5: "AWAITING_RESULTS",
		6: "POST_TRADING",
		7: "CANCELLED",
	}
	EventStatus_value = map[string]int32{
		"PRE_TRADING":      0,
		"TRADING":          1,
		"TRADING_LIVE":     2,
		"RESULTED":         3,
		"INTERRUPTED":      4,
		"AWAITING_RESULTS": 5,
		"POST_TRADING":     6,
		"CANCELLED":        7,
	}
)

func (x EventStatus) Enum() *EventStatus {
	p := new(EventStatus)
	*p = x
	return p
}

func (x EventStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EventStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudbet_feed_proto_enumTypes[0].Descriptor()
}

func (EventStatus) Type() protoreflect.EnumType {
	return &file_cloudbet_feed_proto_enumTypes[0]
}

func (x EventStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use EventStatus.Descriptor instead.
func (EventStatus) EnumDescriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{0}
}

// SelectionStatus presents the current status for a given selection
type SelectionStatus int32

const (
	// selection unavailable for bet placement
	SelectionStatus_SELECTION_DISABLED SelectionStatus = 0
	// selection available for bet placement
	SelectionStatus_SELECTION_ENABLED SelectionStatus = 1
)

// Enum value maps for SelectionStatus.
var (
	SelectionStatus_name = map[int32]string{
		0: "SELECTION_DISABLED",
		1: "SELECTION_ENABLED",
	}
	SelectionStatus_value = map[string]int32{
		"SELECTION_DISABLED": 0,
		"SELECTION_ENABLED":  1,
	}
)

func (x SelectionStatus) Enum() *SelectionStatus {
	p := new(SelectionStatus)
	*p = x
	return p
}

func (x SelectionStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelectionStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudbet_feed_proto_enumTypes[1].Descriptor()
}

func (SelectionStatus) Type() protoreflect.EnumType {
	return &file_cloudbet_feed_proto_enumTypes[1]
}

func (x SelectionStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelectionStatus.Descriptor instead.
func (SelectionStatus) EnumDescriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{1}
}

// Team presents the team for a given player
type Team int32

const (
	// no team defined for a given player
	Team_TEAM_UNDEFINED Team = 0
	// given player belongs to the home team
	Team_HOME Team = 1
	// given player belongs to the away team
	Team_AWAY Team = 2
)

// Enum value maps for Team.
var (
	Team_name = map[int32]string{
		0: "TEAM_UNDEFINED",
		1: "HOME",
		2: "AWAY",
	}
	Team_value = map[string]int32{
		"TEAM_UNDEFINED": 0,
		"HOME":           1,
		"AWAY":           2,
	}
)

func (x Team) Enum() *Team {
	p := new(Team)
	*p = x
	return p
}

func (x Team) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Team) Descriptor() protoreflect.EnumDescriptor {
	return file_cloudbet_feed_proto_enumTypes[2].Descriptor()
}

func (Team) Type() protoreflect.EnumType {
	return &file_cloudbet_feed_proto_enumTypes[2]
}

func (x Team) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Team.Descriptor instead.
func (Team) EnumDescriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{2}
}

// Sports is used as the root object in the /sports endpoint
//
// swagger:model
type Sports struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of all sports offerred
	Sports []*Sport `protobuf:"bytes,1,rep,name=sports,proto3" json:"sports,omitempty"`
}

func (x *Sports) Reset() {
	*x = Sports{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sports) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sports) ProtoMessage() {}

func (x *Sports) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sports.ProtoReflect.Descriptor instead.
func (*Sports) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{0}
}

func (x *Sports) GetSports() []*Sport {
	if x != nil {
		return x.Sports
	}
	return nil
}

// Sport is used for an individual sport's details in the /sports endpoint
//
// swagger:model
type Sport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of this Sport
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// slug for this Sport
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// number of competitions associated with this Sport, 0 indicates inactive Sport
	CompetitionCount uint32 `protobuf:"varint,4,opt,name=competition_count,json=competitionCount,proto3" json:"competition_count,omitempty"`
	// number of events associated with this Sport, 0 indicates inactive Sport
	EventCount uint32 `protobuf:"varint,7,opt,name=event_count,json=eventCount,proto3" json:"event_count,omitempty"`
}

func (x *Sport) Reset() {
	*x = Sport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Sport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Sport) ProtoMessage() {}

func (x *Sport) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Sport.ProtoReflect.Descriptor instead.
func (*Sport) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{1}
}

func (x *Sport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Sport) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Sport) GetCompetitionCount() uint32 {
	if x != nil {
		return x.CompetitionCount
	}
	return 0
}

func (x *Sport) GetEventCount() uint32 {
	if x != nil {
		return x.EventCount
	}
	return 0
}

// SportWithCategory is used for the /sports/{key} endpoint
// with this hierarchy: sport->categories->competitions
//
// swagger:model
type SportWithCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of this Sport
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// slug for this Sport
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// number of competitions associated with this Sport, 0 indicates inactive Sport
	CompetitionCount uint32 `protobuf:"varint,4,opt,name=competition_count,json=competitionCount,proto3" json:"competition_count,omitempty"`
	// list of all categories associated with this Sport
	Categories []*Category `protobuf:"bytes,5,rep,name=categories,proto3" json:"categories,omitempty"`
	// number of events associated with this Sport, 0 indicates inactive Sport
	EventCount uint32 `protobuf:"varint,7,opt,name=event_count,json=eventCount,proto3" json:"event_count,omitempty"`
}

func (x *SportWithCategory) Reset() {
	*x = SportWithCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SportWithCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SportWithCategory) ProtoMessage() {}

func (x *SportWithCategory) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SportWithCategory.ProtoReflect.Descriptor instead.
func (*SportWithCategory) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{2}
}

func (x *SportWithCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SportWithCategory) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *SportWithCategory) GetCompetitionCount() uint32 {
	if x != nil {
		return x.CompetitionCount
	}
	return 0
}

func (x *SportWithCategory) GetCategories() []*Category {
	if x != nil {
		return x.Categories
	}
	return nil
}

func (x *SportWithCategory) GetEventCount() uint32 {
	if x != nil {
		return x.EventCount
	}
	return 0
}

// Category is used for the /sports/{key} endpoint
//
// swagger:model
type Category struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of this Category
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// slug for this Category
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// list of all competitions associated with this Category
	Competitions []*CompetitionForSport `protobuf:"bytes,3,rep,name=competitions,proto3" json:"competitions,omitempty"`
}

func (x *Category) Reset() {
	*x = Category{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Category) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Category) ProtoMessage() {}

func (x *Category) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Category.ProtoReflect.Descriptor instead.
func (*Category) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{3}
}

func (x *Category) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Category) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Category) GetCompetitions() []*CompetitionForSport {
	if x != nil {
		return x.Competitions
	}
	return nil
}

// CompetitionForSport is used for the /sports/{key} endpoint
//
// swagger:model
type CompetitionForSport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of this Competition
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// slug for this Competition
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// number of events associated with this Competition, 0 events indicates inactive Competition
	EventCount uint32 `protobuf:"varint,11,opt,name=event_count,json=eventCount,proto3" json:"event_count,omitempty"`
}

func (x *CompetitionForSport) Reset() {
	*x = CompetitionForSport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionForSport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionForSport) ProtoMessage() {}

func (x *CompetitionForSport) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionForSport.ProtoReflect.Descriptor instead.
func (*CompetitionForSport) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{4}
}

func (x *CompetitionForSport) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompetitionForSport) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CompetitionForSport) GetEventCount() uint32 {
	if x != nil {
		return x.EventCount
	}
	return 0
}

// Competition is used for the /sports/competitions/{key} endpoint
//
// swagger:model
type Competition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of this Competition
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// slug for this Competition
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// sport associated with this Competition
	Sport *Identifier `protobuf:"bytes,4,opt,name=sport,proto3" json:"sport,omitempty"`
	// list of all events associated with this competition
	Events []*EventForCompetition `protobuf:"bytes,8,rep,name=events,proto3" json:"events,omitempty"`
	// category associated with this Competition
	Category *Identifier `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *Competition) Reset() {
	*x = Competition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Competition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Competition) ProtoMessage() {}

func (x *Competition) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Competition.ProtoReflect.Descriptor instead.
func (*Competition) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{5}
}

func (x *Competition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Competition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Competition) GetSport() *Identifier {
	if x != nil {
		return x.Sport
	}
	return nil
}

func (x *Competition) GetEvents() []*EventForCompetition {
	if x != nil {
		return x.Events
	}
	return nil
}

func (x *Competition) GetCategory() *Identifier {
	if x != nil {
		return x.Category
	}
	return nil
}

// CompetitionWithCategory is used for the /sports/events/{id} endpoint to link events with competitions
//
// swagger:model
type CompetitionWithCategory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of this Competition
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// slug for this Competition
	Key string `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
	// category associated with this Competition
	Category *Identifier `protobuf:"bytes,10,opt,name=category,proto3" json:"category,omitempty"`
}

func (x *CompetitionWithCategory) Reset() {
	*x = CompetitionWithCategory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompetitionWithCategory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompetitionWithCategory) ProtoMessage() {}

func (x *CompetitionWithCategory) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompetitionWithCategory.ProtoReflect.Descriptor instead.
func (*CompetitionWithCategory) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{6}
}

func (x *CompetitionWithCategory) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CompetitionWithCategory) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *CompetitionWithCategory) GetCategory() *Identifier {
	if x != nil {
		return x.Category
	}
	return nil
}

// EventForCompetition is used for the /sports/competitions/{key} endpoint
//
// swagger:model
type EventForCompetition struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequential update number for this Event
	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// unique ID for this Event
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// key-name tuple for the home team competitor of this Event
	Home *TeamIdentifier `protobuf:"bytes,7,opt,name=home,proto3" json:"home,omitempty"`
	// key-name tuple for the away team competitor of this Event
	Away *TeamIdentifier `protobuf:"bytes,8,opt,name=away,proto3" json:"away,omitempty"`
	// current status of this Event
	Status EventStatus `protobuf:"varint,10,opt,name=status,proto3,enum=cloudbet.EventStatus" json:"status,omitempty"`
	// mapping between market key and all associated markets for this Event
	Markets map[string]*Market `protobuf:"bytes,13,rep,name=markets,proto3" json:"markets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// name of this Event
	Name string `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`
	// slug for this Event
	Key string `protobuf:"bytes,19,opt,name=key,proto3" json:"key,omitempty"`
	// event cutoff time in string format "2006-01-02T15:04:05Z07:00" (RFC3339)
	CutoffTime string `protobuf:"bytes,23,opt,name=cutoff_time,json=cutoffTime,proto3" json:"cutoff_time,omitempty"`
	// metadata
	Metadata *EventMetadata `protobuf:"bytes,17,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *EventForCompetition) Reset() {
	*x = EventForCompetition{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventForCompetition) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventForCompetition) ProtoMessage() {}

func (x *EventForCompetition) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventForCompetition.ProtoReflect.Descriptor instead.
func (*EventForCompetition) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{7}
}

func (x *EventForCompetition) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *EventForCompetition) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *EventForCompetition) GetHome() *TeamIdentifier {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *EventForCompetition) GetAway() *TeamIdentifier {
	if x != nil {
		return x.Away
	}
	return nil
}

func (x *EventForCompetition) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_PRE_TRADING
}

func (x *EventForCompetition) GetMarkets() map[string]*Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

func (x *EventForCompetition) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *EventForCompetition) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *EventForCompetition) GetCutoffTime() string {
	if x != nil {
		return x.CutoffTime
	}
	return ""
}

func (x *EventForCompetition) GetMetadata() *EventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Event is used for the /sports/events/{id} endpoint
//
// swagger:model
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequential update number for this Event
	Sequence int64 `protobuf:"varint,1,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// unique ID for this Event
	Id uint32 `protobuf:"varint,2,opt,name=id,proto3" json:"id,omitempty"`
	// sport associated with this Event
	Sport *Identifier `protobuf:"bytes,5,opt,name=sport,proto3" json:"sport,omitempty"`
	// competition associated with this Event
	Competition *CompetitionWithCategory `protobuf:"bytes,6,opt,name=competition,proto3" json:"competition,omitempty"`
	// key-name tuple for the home team competitor of this Event
	Home *TeamIdentifier `protobuf:"bytes,7,opt,name=home,proto3" json:"home,omitempty"`
	// key-name tuple for the away team competitor of this Event
	Away *TeamIdentifier `protobuf:"bytes,8,opt,name=away,proto3" json:"away,omitempty"`
	// current status of this Event
	Status EventStatus `protobuf:"varint,10,opt,name=status,proto3,enum=cloudbet.EventStatus" json:"status,omitempty"`
	// mapping between market key and all associated markets for this Event
	Markets map[string]*Market `protobuf:"bytes,13,rep,name=markets,proto3" json:"markets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// name of this Event
	Name string `protobuf:"bytes,18,opt,name=name,proto3" json:"name,omitempty"`
	// slug for this Event
	Key string `protobuf:"bytes,19,opt,name=key,proto3" json:"key,omitempty"`
	// event cutoff time in string format "2006-01-02T15:04:05Z07:00" (RFC3339)
	CutoffTime string `protobuf:"bytes,23,opt,name=cutoff_time,json=cutoffTime,proto3" json:"cutoff_time,omitempty"`
	// metadata
	Metadata *EventMetadata `protobuf:"bytes,17,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{8}
}

func (x *Event) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Event) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Event) GetSport() *Identifier {
	if x != nil {
		return x.Sport
	}
	return nil
}

func (x *Event) GetCompetition() *CompetitionWithCategory {
	if x != nil {
		return x.Competition
	}
	return nil
}

func (x *Event) GetHome() *TeamIdentifier {
	if x != nil {
		return x.Home
	}
	return nil
}

func (x *Event) GetAway() *TeamIdentifier {
	if x != nil {
		return x.Away
	}
	return nil
}

func (x *Event) GetStatus() EventStatus {
	if x != nil {
		return x.Status
	}
	return EventStatus_PRE_TRADING
}

func (x *Event) GetMarkets() map[string]*Market {
	if x != nil {
		return x.Markets
	}
	return nil
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *Event) GetCutoffTime() string {
	if x != nil {
		return x.CutoffTime
	}
	return ""
}

func (x *Event) GetMetadata() *EventMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Event metadata contains additional event info
//
// swagger:model
type EventMetadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// opinion is an answer to question "how players bet"
	Opinion []*OutcomeProbability `protobuf:"bytes,47,rep,name=opinion,proto3" json:"opinion,omitempty"`
}

func (x *EventMetadata) Reset() {
	*x = EventMetadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EventMetadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EventMetadata) ProtoMessage() {}

func (x *EventMetadata) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EventMetadata.ProtoReflect.Descriptor instead.
func (*EventMetadata) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{9}
}

func (x *EventMetadata) GetOpinion() []*OutcomeProbability {
	if x != nil {
		return x.Opinion
	}
	return nil
}

// Similar to Selection, but represents opinion (probability) for particular outcome of the market
//
// swagger:model
type OutcomeProbability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// outcome
	Outcome string `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// probability
	Probability float32 `protobuf:"fixed32,2,opt,name=probability,proto3" json:"probability,omitempty"`
	// market key used to build opinion
	MarketKey string `protobuf:"bytes,3,opt,name=market_key,json=marketKey,proto3" json:"market_key,omitempty"`
	// market parameters used to build opinion, such as handicap, period etc.
	Params string `protobuf:"bytes,4,opt,name=params,proto3" json:"params,omitempty"`
}

func (x *OutcomeProbability) Reset() {
	*x = OutcomeProbability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OutcomeProbability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OutcomeProbability) ProtoMessage() {}

func (x *OutcomeProbability) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OutcomeProbability.ProtoReflect.Descriptor instead.
func (*OutcomeProbability) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{10}
}

func (x *OutcomeProbability) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

func (x *OutcomeProbability) GetProbability() float32 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *OutcomeProbability) GetMarketKey() string {
	if x != nil {
		return x.MarketKey
	}
	return ""
}

func (x *OutcomeProbability) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

// Market is used as a part of Event and EventForCompetition
// used to build a list of all markets for a given Event
//
// swagger:model
type Market struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// mapping between submarket key and all associated submarkets for this Market
	Submarkets map[string]*Submarket `protobuf:"bytes,2,rep,name=submarkets,proto3" json:"submarkets,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Market) Reset() {
	*x = Market{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Market) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Market) ProtoMessage() {}

func (x *Market) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Market.ProtoReflect.Descriptor instead.
func (*Market) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{11}
}

func (x *Market) GetSubmarkets() map[string]*Submarket {
	if x != nil {
		return x.Submarkets
	}
	return nil
}

// Submarket contains selections which are inter-dependent on each other and is used as a part of Market
// used to build a map of all submarkets for a given Market
//
// swagger:model
type Submarket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// sequential update number for this Submarket
	Sequence int64 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
	// list of all associated selections for this Submarket
	Selections []*Selection `protobuf:"bytes,6,rep,name=selections,proto3" json:"selections,omitempty"`
}

func (x *Submarket) Reset() {
	*x = Submarket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Submarket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Submarket) ProtoMessage() {}

func (x *Submarket) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Submarket.ProtoReflect.Descriptor instead.
func (*Submarket) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{12}
}

func (x *Submarket) GetSequence() int64 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *Submarket) GetSelections() []*Selection {
	if x != nil {
		return x.Selections
	}
	return nil
}

// Selection is used as a part of Submarket
// used to build a list of all selections for a given Submarket
//
// swagger:model
type Selection struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// outcome of this Selection
	Outcome string `protobuf:"bytes,1,opt,name=outcome,proto3" json:"outcome,omitempty"`
	// parameters to be sent by the client during bet placement on this selection, such as handicap, period etc.
	Params string `protobuf:"bytes,2,opt,name=params,proto3" json:"params,omitempty"`
	// price at which bets can be placed on this Selection
	Price float64 `protobuf:"fixed64,3,opt,name=price,proto3" json:"price,omitempty"`
	// maximum stake in EUR which can be placed in bets on this Selection; market liability = selection max stake * (price - 1); minimum stake is 0.01 EUR for all markets
	MaxStake float64 `protobuf:"fixed64,5,opt,name=max_stake,json=maxStake,proto3" json:"max_stake,omitempty"`
	// probability of this Selection's outcome
	Probability float64 `protobuf:"fixed64,6,opt,name=probability,proto3" json:"probability,omitempty"`
	// current status of this Selection
	Status SelectionStatus `protobuf:"varint,7,opt,name=status,proto3,enum=cloudbet.SelectionStatus" json:"status,omitempty"`
	// side of this Selection (back/lay)
	Side Side `protobuf:"varint,8,opt,name=side,proto3,enum=cloudbet.Side" json:"side,omitempty"`
}

func (x *Selection) Reset() {
	*x = Selection{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Selection) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Selection) ProtoMessage() {}

func (x *Selection) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Selection.ProtoReflect.Descriptor instead.
func (*Selection) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{13}
}

func (x *Selection) GetOutcome() string {
	if x != nil {
		return x.Outcome
	}
	return ""
}

func (x *Selection) GetParams() string {
	if x != nil {
		return x.Params
	}
	return ""
}

func (x *Selection) GetPrice() float64 {
	if x != nil {
		return x.Price
	}
	return 0
}

func (x *Selection) GetMaxStake() float64 {
	if x != nil {
		return x.MaxStake
	}
	return 0
}

func (x *Selection) GetProbability() float64 {
	if x != nil {
		return x.Probability
	}
	return 0
}

func (x *Selection) GetStatus() SelectionStatus {
	if x != nil {
		return x.Status
	}
	return SelectionStatus_SELECTION_DISABLED
}

func (x *Selection) GetSide() Side {
	if x != nil {
		return x.Side
	}
	return Side_BACK
}

// Identifier represents a name-key tuple which together identify a given entity such as a sport
//
// swagger:model
type Identifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of this Identifier
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// slug for this Identifier
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *Identifier) Reset() {
	*x = Identifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identifier) ProtoMessage() {}

func (x *Identifier) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identifier.ProtoReflect.Descriptor instead.
func (*Identifier) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{14}
}

func (x *Identifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Identifier) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

// TeamIdentifier identifies a team competitor for a given event
//
// swagger:model
type TeamIdentifier struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of this Identifier
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// slug for this Identifier
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty"`
	// abbreviation for this team's name
	Abbreviation string `protobuf:"bytes,4,opt,name=abbreviation,proto3" json:"abbreviation,omitempty"`
	// team country code
	Nationality string `protobuf:"bytes,6,opt,name=nationality,proto3" json:"nationality,omitempty"`
}

func (x *TeamIdentifier) Reset() {
	*x = TeamIdentifier{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cloudbet_feed_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TeamIdentifier) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TeamIdentifier) ProtoMessage() {}

func (x *TeamIdentifier) ProtoReflect() protoreflect.Message {
	mi := &file_cloudbet_feed_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TeamIdentifier.ProtoReflect.Descriptor instead.
func (*TeamIdentifier) Descriptor() ([]byte, []int) {
	return file_cloudbet_feed_proto_rawDescGZIP(), []int{15}
}

func (x *TeamIdentifier) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *TeamIdentifier) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *TeamIdentifier) GetAbbreviation() string {
	if x != nil {
		return x.Abbreviation
	}
	return ""
}

func (x *TeamIdentifier) GetNationality() string {
	if x != nil {
		return x.Nationality
	}
	return ""
}

var File_cloudbet_feed_proto protoreflect.FileDescriptor

var file_cloudbet_feed_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2f, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x1a,
	0x16, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2f, 0x74, 0x72, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x31, 0x0a, 0x06, 0x53, 0x70, 0x6f, 0x72, 0x74,
	0x73, 0x12, 0x27, 0x0a, 0x06, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x53, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x06, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x73, 0x22, 0x7b, 0x0a, 0x05, 0x53, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xbb, 0x01, 0x0a, 0x11, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x11, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x32, 0x0a, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52, 0x0a, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x69, 0x65, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x08, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x0c, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x0c, 0x63, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x5c, 0x0a, 0x13, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x53, 0x70, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0xc8, 0x01, 0x0a, 0x0b, 0x43, 0x6f, 0x6d,
	0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2a,
	0x0a, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x52, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x35, 0x0a, 0x06, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f,
	0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x22, 0x71, 0x0a, 0x17, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65,
	0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x22, 0xdc, 0x03, 0x0a, 0x13, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2c, 0x0a, 0x04, 0x68, 0x6f,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x62, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x77, 0x61, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65,
	0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x04, 0x61, 0x77, 0x61, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65,
	0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65,
	0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x46, 0x6f, 0x72, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65,
	0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x5f, 0x74, 0x69, 0x6d, 0x65,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2e,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x0c, 0x4d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x62, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb1, 0x04, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x69, 0x64, 0x12, 0x2a, 0x0a, 0x05, 0x73,
	0x70, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x52, 0x05, 0x73, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x65,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x57, 0x69, 0x74, 0x68, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x52,
	0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x65, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x04,
	0x68, 0x6f, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x52, 0x04, 0x68, 0x6f, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x04, 0x61, 0x77,
	0x61, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x62, 0x65, 0x74, 0x2e, 0x54, 0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x52, 0x04, 0x61, 0x77, 0x61, 0x79, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x62, 0x65, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x36, 0x0a, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x62, 0x65, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x75, 0x74, 0x6f, 0x66, 0x66, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x75, 0x74, 0x6f,
	0x66, 0x66, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64,
	0x62, 0x65, 0x74, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x4c, 0x0a, 0x0c, 0x4d,
	0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x47, 0x0a, 0x0d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x07, 0x6f, 0x70,
	0x69, 0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x2f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x52, 0x07, 0x6f, 0x70, 0x69, 0x6e, 0x69,
	0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x4f, 0x75, 0x74, 0x63, 0x6f, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62,
	0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6d, 0x61, 0x72, 0x6b, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x22, 0x9e, 0x01, 0x0a,
	0x06, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x73, 0x75, 0x62, 0x6d, 0x61,
	0x72, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x6c,
	0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x2e, 0x53, 0x75,
	0x62, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x73,
	0x75, 0x62, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x1a, 0x52, 0x0a, 0x0f, 0x53, 0x75, 0x62,
	0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e,
	0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x5c, 0x0a,
	0x09, 0x53, 0x75, 0x62, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x73, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x6c, 0x6f,
	0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x0a, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xe9, 0x01, 0x0a, 0x09,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74,
	0x63, 0x6f, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6f, 0x75, 0x74, 0x63,
	0x6f, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x70,
	0x72, 0x69, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x70, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x6d, 0x61, 0x78, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x12, 0x31, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x22, 0x0a, 0x04, 0x73, 0x69, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x2e, 0x53, 0x69, 0x64,
	0x65, 0x52, 0x04, 0x73, 0x69, 0x64, 0x65, 0x22, 0x32, 0x0a, 0x0a, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0x7c, 0x0a, 0x0e, 0x54,
	0x65, 0x61, 0x6d, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x22, 0x0a, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65, 0x76, 0x69, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x61, 0x62, 0x62, 0x72, 0x65,
	0x76, 0x69, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x6e, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x6e, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x2a, 0x93, 0x01, 0x0a, 0x0b, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x52, 0x45,
	0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x52,
	0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x54, 0x52, 0x41, 0x44, 0x49,
	0x4e, 0x47, 0x5f, 0x4c, 0x49, 0x56, 0x45, 0x10, 0x02, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x45, 0x53,
	0x55, 0x4c, 0x54, 0x45, 0x44, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x52, 0x55, 0x50, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x14, 0x0a, 0x10, 0x41, 0x57, 0x41, 0x49,
	0x54, 0x49, 0x4e, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x55, 0x4c, 0x54, 0x53, 0x10, 0x05, 0x12, 0x10,
	0x0a, 0x0c, 0x50, 0x4f, 0x53, 0x54, 0x5f, 0x54, 0x52, 0x41, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x06,
	0x12, 0x0d, 0x0a, 0x09, 0x43, 0x41, 0x4e, 0x43, 0x45, 0x4c, 0x4c, 0x45, 0x44, 0x10, 0x07, 0x2a,
	0x40, 0x0a, 0x0f, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x44, 0x49, 0x53, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x45,
	0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x41, 0x42, 0x4c, 0x45, 0x44, 0x10,
	0x01, 0x2a, 0x2e, 0x0a, 0x04, 0x54, 0x65, 0x61, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x45, 0x41,
	0x4d, 0x5f, 0x55, 0x4e, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x48, 0x4f, 0x4d, 0x45, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x57, 0x41, 0x59, 0x10,
	0x02, 0x42, 0x0a, 0x5a, 0x08, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x62, 0x65, 0x74, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cloudbet_feed_proto_rawDescOnce sync.Once
	file_cloudbet_feed_proto_rawDescData = file_cloudbet_feed_proto_rawDesc
)

func file_cloudbet_feed_proto_rawDescGZIP() []byte {
	file_cloudbet_feed_proto_rawDescOnce.Do(func() {
		file_cloudbet_feed_proto_rawDescData = protoimpl.X.CompressGZIP(file_cloudbet_feed_proto_rawDescData)
	})
	return file_cloudbet_feed_proto_rawDescData
}

var file_cloudbet_feed_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_cloudbet_feed_proto_msgTypes = make([]protoimpl.MessageInfo, 19)
var file_cloudbet_feed_proto_goTypes = []interface{}{
	(EventStatus)(0),                // 0: cloudbet.EventStatus
	(SelectionStatus)(0),            // 1: cloudbet.SelectionStatus
	(Team)(0),                       // 2: cloudbet.Team
	(*Sports)(nil),                  // 3: cloudbet.Sports
	(*Sport)(nil),                   // 4: cloudbet.Sport
	(*SportWithCategory)(nil),       // 5: cloudbet.SportWithCategory
	(*Category)(nil),                // 6: cloudbet.Category
	(*CompetitionForSport)(nil),     // 7: cloudbet.CompetitionForSport
	(*Competition)(nil),             // 8: cloudbet.Competition
	(*CompetitionWithCategory)(nil), // 9: cloudbet.CompetitionWithCategory
	(*EventForCompetition)(nil),     // 10: cloudbet.EventForCompetition
	(*Event)(nil),                   // 11: cloudbet.Event
	(*EventMetadata)(nil),           // 12: cloudbet.EventMetadata
	(*OutcomeProbability)(nil),      // 13: cloudbet.OutcomeProbability
	(*Market)(nil),                  // 14: cloudbet.Market
	(*Submarket)(nil),               // 15: cloudbet.Submarket
	(*Selection)(nil),               // 16: cloudbet.Selection
	(*Identifier)(nil),              // 17: cloudbet.Identifier
	(*TeamIdentifier)(nil),          // 18: cloudbet.TeamIdentifier
	nil,                             // 19: cloudbet.EventForCompetition.MarketsEntry
	nil,                             // 20: cloudbet.Event.MarketsEntry
	nil,                             // 21: cloudbet.Market.SubmarketsEntry
	(Side)(0),                       // 22: cloudbet.Side
}
var file_cloudbet_feed_proto_depIdxs = []int32{
	4,  // 0: cloudbet.Sports.sports:type_name -> cloudbet.Sport
	6,  // 1: cloudbet.SportWithCategory.categories:type_name -> cloudbet.Category
	7,  // 2: cloudbet.Category.competitions:type_name -> cloudbet.CompetitionForSport
	17, // 3: cloudbet.Competition.sport:type_name -> cloudbet.Identifier
	10, // 4: cloudbet.Competition.events:type_name -> cloudbet.EventForCompetition
	17, // 5: cloudbet.Competition.category:type_name -> cloudbet.Identifier
	17, // 6: cloudbet.CompetitionWithCategory.category:type_name -> cloudbet.Identifier
	18, // 7: cloudbet.EventForCompetition.home:type_name -> cloudbet.TeamIdentifier
	18, // 8: cloudbet.EventForCompetition.away:type_name -> cloudbet.TeamIdentifier
	0,  // 9: cloudbet.EventForCompetition.status:type_name -> cloudbet.EventStatus
	19, // 10: cloudbet.EventForCompetition.markets:type_name -> cloudbet.EventForCompetition.MarketsEntry
	12, // 11: cloudbet.EventForCompetition.metadata:type_name -> cloudbet.EventMetadata
	17, // 12: cloudbet.Event.sport:type_name -> cloudbet.Identifier
	9,  // 13: cloudbet.Event.competition:type_name -> cloudbet.CompetitionWithCategory
	18, // 14: cloudbet.Event.home:type_name -> cloudbet.TeamIdentifier
	18, // 15: cloudbet.Event.away:type_name -> cloudbet.TeamIdentifier
	0,  // 16: cloudbet.Event.status:type_name -> cloudbet.EventStatus
	20, // 17: cloudbet.Event.markets:type_name -> cloudbet.Event.MarketsEntry
	12, // 18: cloudbet.Event.metadata:type_name -> cloudbet.EventMetadata
	13, // 19: cloudbet.EventMetadata.opinion:type_name -> cloudbet.OutcomeProbability
	21, // 20: cloudbet.Market.submarkets:type_name -> cloudbet.Market.SubmarketsEntry
	16, // 21: cloudbet.Submarket.selections:type_name -> cloudbet.Selection
	1,  // 22: cloudbet.Selection.status:type_name -> cloudbet.SelectionStatus
	22, // 23: cloudbet.Selection.side:type_name -> cloudbet.Side
	14, // 24: cloudbet.EventForCompetition.MarketsEntry.value:type_name -> cloudbet.Market
	14, // 25: cloudbet.Event.MarketsEntry.value:type_name -> cloudbet.Market
	15, // 26: cloudbet.Market.SubmarketsEntry.value:type_name -> cloudbet.Submarket
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_cloudbet_feed_proto_init() }
func file_cloudbet_feed_proto_init() {
	if File_cloudbet_feed_proto != nil {
		return
	}
	file_cloudbet_trading_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cloudbet_feed_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sports); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Sport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SportWithCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Category); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionForSport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Competition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompetitionWithCategory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventForCompetition); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Event); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EventMetadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OutcomeProbability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Market); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Submarket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Selection); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cloudbet_feed_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TeamIdentifier); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cloudbet_feed_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   19,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cloudbet_feed_proto_goTypes,
		DependencyIndexes: file_cloudbet_feed_proto_depIdxs,
		EnumInfos:         file_cloudbet_feed_proto_enumTypes,
		MessageInfos:      file_cloudbet_feed_proto_msgTypes,
	}.Build()
	File_cloudbet_feed_proto = out.File
	file_cloudbet_feed_proto_rawDesc = nil
	file_cloudbet_feed_proto_goTypes = nil
	file_cloudbet_feed_proto_depIdxs = nil
}
